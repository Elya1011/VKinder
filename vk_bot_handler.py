import vk_api, os, json

from db_hand import save_user_id, adding_favorite_users, adding_dark_list, display_of_favorite_users
from functions import VkBot
from keyboards import keyboard_2, keyboard_1
from dotenv import load_dotenv
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
load_dotenv()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
GROUP_ID = 229695508  # –ß–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 12345678
TOKEN = os.getenv('VK_BOT_TOKEN')  # –°—Ç—Ä–æ–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
vk_session = vk_api.VkApi(token=TOKEN)
backend_session = VkBot(access_token=os.getenv('VKTOKEN'))
longpoll = VkBotLongPoll(vk_session, group_id=GROUP_ID)
vk = vk_session.get_api()

search_request = {'age_from': 18, 'age_to': 50, 'sex': 0, 'city': '–ú–æ—Å–∫–≤–∞'}

def standard_keyboard_message(user_id, text):
    vk.messages.send(
        user_id=user_id,
        message=text,
        random_id=0
    )

def send_message(user_id, message):
    keyboard = {
        'inline': False,
        "one_time": True,
        "buttons": [
            [
                {
                    'action': {
                        'type': 'text',
                        'label': '–º—É–∂—á–∏–Ω—ã'
                    },
                    'color': 'positive'
                },
                {
                    'action': {
                        'type': 'text',
                        'label': '–¥–µ–≤—É—à–∫–∏'
                    },
                    'color': 'positive'
                }

            ]
        ]
    }
    vk.messages.send(
        user_id=user_id,
        message=message,
        random_id=0,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard=json.dumps(keyboard)
    )

def message_2(user_id, message):
    vk.messages.send(
        user_id=user_id,
        message=message,
        random_id=0,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard=json.dumps(keyboard_2)
    )


def display_result_message(user_id: int, message: str, attachments: list = None):
    params = {
        'user_id': user_id,
        'message': message,
        'random_id': 0,
        'keyboard': json.dumps(keyboard_1)
    }
    if attachments:  # –î–æ–±–∞–≤–ª—è–µ–º attachment —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è
        params['attachment'] = ','.join(attachments)
    print(params)
    vk.messages.send(**params)

def bot_handler():
    """–õ–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ bot_main"""
    user_states = {}
    user_search_results = {}
    print('–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç')

    for event in longpoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW:
            msg = event.object.message
            user_id = msg['from_id']
            text = msg['text'].lower()
            save_user_id(user_id)
            print(text)

            if text in ['—Å—Ç–∞—Ä—Ç', '–∑–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∏—Å–∫üö´']:
                send_message(user_id, '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª')

            elif text == '–¥–µ–≤—É—à–∫–∏' or text == '–º—É–∂—á–∏–Ω—ã':
                message_2(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞')
                if text == '–¥–µ–≤—É—à–∫–∏':
                    search_request['sex'] = 1
                if text == '–º—É–∂—á–∏–Ω—ã':
                    search_request['sex'] = 2

            elif text in ['18-25', '26-30', '31-40', '41-50']:
                search_request['age_from'] = int(text.split('-')[0])
                search_request['age_to'] = int(text.split('-')[1])
                standard_keyboard_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞')
                user_states[user_id] = "waiting_for_input"

            elif user_id in user_states and user_states[user_id] == "waiting_for_input":
                search_request['city'] = text
                del user_states[user_id]
                user_search_results[user_id] = backend_session.search_users(**search_request)
                user_states[user_id] = 0
                current_result = user_search_results[user_id][user_states[user_id]]
                message = f"{current_result['first_name']} {current_result['last_name']} https://vk.com/id{current_result['id']}"
                attachments = backend_session.get_photo_links(
                    current_result['id']
                )
                print(attachments)
                display_result_message(user_id, message, attachments)

            elif user_id in user_states and isinstance(user_states[user_id], int) and \
            text in ["–¥–∞–ª—å—à–µüëâ", "üëà–Ω–∞–∑–∞–¥"]:
                step = {"–¥–∞–ª—å—à–µüëâ": 1, "üëà–Ω–∞–∑–∞–¥": -1}
                user_states[user_id] += step[text]
                current_result = user_search_results[user_id][user_states[user_id]]
                message = f"{current_result['first_name']} {current_result['last_name']} https://vk.com/id{current_result['id']}"
                attachments = backend_session.get_photo_links(
                    current_result['id']
                )
                display_result_message(user_id, message, attachments)

            elif user_id in user_states and isinstance(user_states[user_id], int) and \
            text in ["–¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"]:
                current_result = user_search_results[user_id][user_states[user_id]]
                adding_favorite_users(user_id, current_result['id'])

            elif user_id in user_states and isinstance(user_states[user_id], int) and \
            text in ["–¥–æ–±–∞–≤–∏—Ç—å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"]:
                current_result = user_search_results[user_id][user_states[user_id]]
                adding_dark_list(user_id, current_result['id'])

            elif user_id in user_states and isinstance(user_states[user_id], int) and \
            text in ["–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"]:
                favourite_id_list = [f'https://vk.com/id{c}' for c in display_of_favorite_users(user_id)]
                message = '\n'.join(favourite_id_list)
                print(message)
                display_result_message(user_id, message)